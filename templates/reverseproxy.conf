################################################################################
# This file was generated by Ansible for {{ansible_fqdn}}
# Do NOT modify this file by hand!
################################################################################

### UPSTREAMS
{% for upstream in item.value.location_to_upstream %}
{% if upstream.protocol is defined %}
upstream {{ upstream.location |regex_replace("[^0-9a-zA-Z]+", "") }}_backend {
{% if upstream.addrs is defined %}
{% for u in upstream.addrs %}
    server {{ u }};
{% endfor %}
{% elif upstream.socket_path is defined %}
   server unix:{{ upstream.socket_path }};
{% endif %}
}
{% endif %}
{% endfor %}

{% if item.value.ssl_client_auth.enabled |default(false) %}
## USED FOR TLS CLIENT AUTH
map $ssl_client_s_dn $proxy_certificate {
    default 0;
    CN={{ item.value.ssl_client_auth.force_cn }} 1;
}
{% endif %}

{% if (item.value.letsencrypt is defined) or (item.value.ssl.enabled is defined) %}
### HTTP REDIRECT (ONLY IF SSL/LETSENCRYPT ENABLED)
server {
    listen         {{ item.value.port.http | default(80) }};
    listen    [::]:{{ item.value.port.http | default(80) }};
    server_name {{ item.key }}{{ ([''] + (item.value.additional_domains | default([]))) | join(' ') }};
    location / {
       return 301 https://$server_name$request_uri;
    }

{% if item.value.letsencrypt is defined %}
    location /.well-known/acme-challenge {
        alias /var/www/{{ item.key }}/.well-known/acme-challenge;
    }
{% endif %}

    ## LOGGING
{% if item.value.log.syslog %}
    access_log syslog:server=unix:/dev/log,facility=local0,severity=info,nohostname {{ item.value.log.access_fmt }};
    error_log syslog:server=unix:/dev/log,facility=local0,severity=error,nohostname {{ item.value.log.error_fmt }};
{% else %}
    access_log /var/log/nginx/{{ item.key }}_access.log {{ item.value.log.access_fmt }};
    error_log /var/log/nginx/{{ item.key }}_error.log {{ item.value.log.error_fmt }};
{% endif %}
}
{% endif %}

### MAIN SERVER (SSL / HTTP)
server {
{% if (item.value.letsencrypt is defined) or (item.value.ssl.enabled is defined) %}
    listen        {{ item.value.port.https | default(443) }} ssl;
    listen   [::]:{{ item.value.port.https | default(443) }} ssl;
{% else %}
    listen        {{ item.value.port.http | default(80) }};
    listen   [::]:{{ item.value.port.http | default(80) }};
{% endif %}
    server_name {{ item.key }}{{ ([''] + (item.value.additional_domains | default([]))) | join(' ') }};
    server_tokens off;

{% if (item.value.redirect_to_primary |default(false)) and item.value.additional_domains is defined %}
    ## redirect to primary domain
    if ($host != '{{ item.key }}') {
        return 301 https://{{ item.key }}$request_uri;
    }
{% endif %}

    ## HSTS
{% if item.value.hsts is defined %}
    add_header Strict-Transport-Security "max-age={{ item.value.hsts.max_age }}; {% if item.value.hsts.includeSubDomains %}includeSubDomains; preload{% endif %}" always;
{% endif %}

    ## LOGGING
{% if item.value.log.syslog %}
    access_log syslog:server=unix:/dev/log,facility=local0,severity=info,nohostname {{ item.value.log.access_fmt }};
    error_log syslog:server=unix:/dev/log,facility=local0,severity=error,nohostname {{ item.value.log.error_fmt }};
{% else %}
    access_log /var/log/nginx/{{ item.key }}_access.log {{ item.value.log.access_fmt }};
    error_log /var/log/nginx/{{ item.key }}_error.log {{ item.value.log.error_fmt }};
{% endif %}

{% if (item.value.letsencrypt is defined) and (item.value.ssl.enabled is not defined) %}
    ## SSL
    ssl_certificate /etc/letsencrypt/live/{{ item.key }}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/{{ item.key }}/privkey.pem;
{% elif (item.value.ssl is defined) and (item.value.letsencrypt is not defined) %}
    ssl_certificate {{ item.value.ssl.pem_path }};
    ssl_certificate_key {{ item.value.ssl.key_path }};
{% endif %}
{% if (item.value.letsencrypt is defined) or (item.value.ssl.enabled is defined) %}
    ssl_session_timeout 5m;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
{% endif %}

{% if item.value.ssl_client_auth.enabled |default(false) %}
    ## TLS CLIENT AUTH
    ssl_client_certificate {{ item.value.ssl_client_auth.ca_cert }};
    ssl_verify_client on;
{% endif %}

{% if item.value.letsencrypt is defined %}
    location /.well-known/acme-challenge {
        alias /var/www/{{ item.key }}/.well-known/acme-challenge;
    }
{% endif %}

{% if item.value.error_pages is defined  %}
{% for error_page in item.value.error_pages %}
    error_page {{ error_page.codes | join(' ') }} {{error_page.site}};
    location = {{error_page.site}} {
        root {{ error_page.location }};
        internal;
    }
{% endfor %}
{% endif %}

{% for upstream in item.value.location_to_upstream %}
    location {{ upstream.location }}/ {
{% if (item.value.ssl_client_auth.enabled |default(false)) and (item.value.ssl_client_auth.force_cn is defined) %}
        # FORCE CLIENT TLS AUTH CN
        if ( $proxy_certificate != 1 ) {
            return 403;
        }
	
{% endif %}
        gzip off;
        client_max_body_size {{ upstream.client_max_body_size | default('50M') }};
{% if upstream.webroot is defined %}
        root {{ upstream.webroot }};
{% else %}
{%    if (item.value.letsencrypt is defined) or (item.value.ssl.enabled is defined) %}
        proxy_set_header X-Forwarded-Ssl on;
{%    endif %}
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Frame-Options SAMEORIGIN;

{%    if upstream.protocol == 'uwsgi' %}
        uwsgi_pass {{ upstream.location |regex_replace("[^0-9a-zA-Z]+", "") }}_backend;
        include {{ uwsgi_param_location |default('/etc/nginx/uwsgi_params') }};
{%    elif upstream.protocol is defined %}
        proxy_pass {{ upstream.protocol }}://{{ upstream.location |regex_replace("[^0-9a-zA-Z]+", "") }}_backend{{ upstream.upstream_location| default('') }}/;
{%     endif %}
{% endif %}
{% for option in upstream.additional_options |default([]) %}
        {{ option }};
{% endfor %}
{% if item.value.basic_auth is defined %}
        auth_basic "{{ item.value.basic_auth.message |default('Restricted Content') }}";
        auth_basic_user_file /etc/nginx/{{ item.key }}_htpasswd;
{% endif %}
    }
{% endfor %}
}
